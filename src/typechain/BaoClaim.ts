/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
	BaseContract,
	BigNumber,
	BigNumberish,
	BytesLike,
	CallOverrides,
	ContractTransaction,
	Overrides,
	PopulatedTransaction,
	Signer,
	utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../abi/typechain/common'

export interface BaoClaimInterface extends utils.Interface {
	functions: {
		'CLAIM_AMOUNT()': FunctionFragment
		'claim(bytes32[])': FunctionFragment
		'endDate()': FunctionFragment
		'hasClaimed(address)': FunctionFragment
		'merkleRoot()': FunctionFragment
		'multisig()': FunctionFragment
		'owner()': FunctionFragment
		'renounceOwnership()': FunctionFragment
		'setDates(uint256,uint256)': FunctionFragment
		'setMerkleRoot(bytes32)': FunctionFragment
		'setMultisig(address)': FunctionFragment
		'startDate()': FunctionFragment
		'sweep()': FunctionFragment
		'token()': FunctionFragment
		'transferOwnership(address)': FunctionFragment
	}

	getFunction(
		nameOrSignatureOrTopic:
			| 'CLAIM_AMOUNT'
			| 'claim'
			| 'endDate'
			| 'hasClaimed'
			| 'merkleRoot'
			| 'multisig'
			| 'owner'
			| 'renounceOwnership'
			| 'setDates'
			| 'setMerkleRoot'
			| 'setMultisig'
			| 'startDate'
			| 'sweep'
			| 'token'
			| 'transferOwnership',
	): FunctionFragment

	encodeFunctionData(functionFragment: 'CLAIM_AMOUNT', values?: undefined): string
	encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<BytesLike>[]]): string
	encodeFunctionData(functionFragment: 'endDate', values?: undefined): string
	encodeFunctionData(functionFragment: 'hasClaimed', values: [PromiseOrValue<string>]): string
	encodeFunctionData(functionFragment: 'merkleRoot', values?: undefined): string
	encodeFunctionData(functionFragment: 'multisig', values?: undefined): string
	encodeFunctionData(functionFragment: 'owner', values?: undefined): string
	encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
	encodeFunctionData(functionFragment: 'setDates', values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]): string
	encodeFunctionData(functionFragment: 'setMerkleRoot', values: [PromiseOrValue<BytesLike>]): string
	encodeFunctionData(functionFragment: 'setMultisig', values: [PromiseOrValue<string>]): string
	encodeFunctionData(functionFragment: 'startDate', values?: undefined): string
	encodeFunctionData(functionFragment: 'sweep', values?: undefined): string
	encodeFunctionData(functionFragment: 'token', values?: undefined): string
	encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string

	decodeFunctionResult(functionFragment: 'CLAIM_AMOUNT', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'endDate', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'hasClaimed', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'merkleRoot', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'multisig', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setDates', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setMerkleRoot', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'setMultisig', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'startDate', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'sweep', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
	decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

	events: {
		'Claimed(address)': EventFragment
		'OwnershipTransferred(address,address)': EventFragment
		'Sweep(address,uint256)': EventFragment
	}

	getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
	getEvent(nameOrSignatureOrTopic: 'Sweep'): EventFragment
}

export interface ClaimedEventObject {
	claimer: string
}
export type ClaimedEvent = TypedEvent<[string], ClaimedEventObject>

export type ClaimedEventFilter = TypedEventFilter<ClaimedEvent>

export interface OwnershipTransferredEventObject {
	previousOwner: string
	newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface SweepEventObject {
	to: string
	amount: BigNumber
}
export type SweepEvent = TypedEvent<[string, BigNumber], SweepEventObject>

export type SweepEventFilter = TypedEventFilter<SweepEvent>

export interface BaoClaim extends BaseContract {
	connect(signerOrProvider: Signer | Provider | string): this
	attach(addressOrName: string): this
	deployed(): Promise<this>

	interface: BaoClaimInterface

	queryFilter<TEvent extends TypedEvent>(
		event: TypedEventFilter<TEvent>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined,
	): Promise<Array<TEvent>>

	listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
	listeners(eventName?: string): Array<Listener>
	removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
	removeAllListeners(eventName?: string): this
	off: OnEvent<this>
	on: OnEvent<this>
	once: OnEvent<this>
	removeListener: OnEvent<this>

	functions: {
		CLAIM_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>

		claim(merkleProof: PromiseOrValue<BytesLike>[], overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

		endDate(overrides?: CallOverrides): Promise<[BigNumber]>

		hasClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

		merkleRoot(overrides?: CallOverrides): Promise<[string]>

		multisig(overrides?: CallOverrides): Promise<[string]>

		owner(overrides?: CallOverrides): Promise<[string]>

		renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

		setDates(
			_startDate: PromiseOrValue<BigNumberish>,
			_endDate: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		setMerkleRoot(
			_newRoot: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>

		setMultisig(_multisig: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

		startDate(overrides?: CallOverrides): Promise<[BigNumber]>

		sweep(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

		token(overrides?: CallOverrides): Promise<[string]>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<ContractTransaction>
	}

	CLAIM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

	claim(merkleProof: PromiseOrValue<BytesLike>[], overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

	endDate(overrides?: CallOverrides): Promise<BigNumber>

	hasClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

	merkleRoot(overrides?: CallOverrides): Promise<string>

	multisig(overrides?: CallOverrides): Promise<string>

	owner(overrides?: CallOverrides): Promise<string>

	renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

	setDates(
		_startDate: PromiseOrValue<BigNumberish>,
		_endDate: PromiseOrValue<BigNumberish>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	setMerkleRoot(
		_newRoot: PromiseOrValue<BytesLike>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	setMultisig(_multisig: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

	startDate(overrides?: CallOverrides): Promise<BigNumber>

	sweep(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

	token(overrides?: CallOverrides): Promise<string>

	transferOwnership(
		newOwner: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<ContractTransaction>

	callStatic: {
		CLAIM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

		claim(merkleProof: PromiseOrValue<BytesLike>[], overrides?: CallOverrides): Promise<void>

		endDate(overrides?: CallOverrides): Promise<BigNumber>

		hasClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

		merkleRoot(overrides?: CallOverrides): Promise<string>

		multisig(overrides?: CallOverrides): Promise<string>

		owner(overrides?: CallOverrides): Promise<string>

		renounceOwnership(overrides?: CallOverrides): Promise<void>

		setDates(_startDate: PromiseOrValue<BigNumberish>, _endDate: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

		setMerkleRoot(_newRoot: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

		setMultisig(_multisig: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

		startDate(overrides?: CallOverrides): Promise<BigNumber>

		sweep(overrides?: CallOverrides): Promise<void>

		token(overrides?: CallOverrides): Promise<string>

		transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
	}

	filters: {
		'Claimed(address)'(claimer?: PromiseOrValue<string> | null): ClaimedEventFilter
		Claimed(claimer?: PromiseOrValue<string> | null): ClaimedEventFilter

		'OwnershipTransferred(address,address)'(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null,
		): OwnershipTransferredEventFilter
		OwnershipTransferred(
			previousOwner?: PromiseOrValue<string> | null,
			newOwner?: PromiseOrValue<string> | null,
		): OwnershipTransferredEventFilter

		'Sweep(address,uint256)'(to?: PromiseOrValue<string> | null, amount?: null): SweepEventFilter
		Sweep(to?: PromiseOrValue<string> | null, amount?: null): SweepEventFilter
	}

	estimateGas: {
		CLAIM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

		claim(merkleProof: PromiseOrValue<BytesLike>[], overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

		endDate(overrides?: CallOverrides): Promise<BigNumber>

		hasClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

		merkleRoot(overrides?: CallOverrides): Promise<BigNumber>

		multisig(overrides?: CallOverrides): Promise<BigNumber>

		owner(overrides?: CallOverrides): Promise<BigNumber>

		renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

		setDates(
			_startDate: PromiseOrValue<BigNumberish>,
			_endDate: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<BigNumber>

		setMerkleRoot(_newRoot: PromiseOrValue<BytesLike>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

		setMultisig(_multisig: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

		startDate(overrides?: CallOverrides): Promise<BigNumber>

		sweep(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

		token(overrides?: CallOverrides): Promise<BigNumber>

		transferOwnership(newOwner: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
	}

	populateTransaction: {
		CLAIM_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>

		claim(
			merkleProof: PromiseOrValue<BytesLike>[],
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		endDate(overrides?: CallOverrides): Promise<PopulatedTransaction>

		hasClaimed(arg0: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

		merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>

		multisig(overrides?: CallOverrides): Promise<PopulatedTransaction>

		owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

		renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

		setDates(
			_startDate: PromiseOrValue<BigNumberish>,
			_endDate: PromiseOrValue<BigNumberish>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		setMerkleRoot(
			_newRoot: PromiseOrValue<BytesLike>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>

		setMultisig(_multisig: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

		startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>

		sweep(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

		token(overrides?: CallOverrides): Promise<PopulatedTransaction>

		transferOwnership(
			newOwner: PromiseOrValue<string>,
			overrides?: Overrides & { from?: PromiseOrValue<string> },
		): Promise<PopulatedTransaction>
	}
}
