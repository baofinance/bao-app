/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, BytesLike, BigNumberish, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../abi/typechain/common'
import type { BaoClaim, BaoClaimInterface } from '../BaoClaim'

const _abi = [
	{
		type: 'constructor',
		inputs: [
			{
				name: '_merkleRoot',
				type: 'bytes32',
				internalType: 'bytes32',
			},
			{
				name: '_startDate',
				type: 'uint256',
				internalType: 'uint256',
			},
			{
				name: '_endDate',
				type: 'uint256',
				internalType: 'uint256',
			},
			{
				name: '_multisig',
				type: 'address',
				internalType: 'address',
			},
			{
				name: '_token',
				type: 'address',
				internalType: 'address',
			},
		],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'CLAIM_AMOUNT',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'uint256',
				internalType: 'uint256',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'claim',
		inputs: [
			{
				name: 'merkleProof',
				type: 'bytes32[]',
				internalType: 'bytes32[]',
			},
		],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'endDate',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'uint256',
				internalType: 'uint256',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'hasClaimed',
		inputs: [
			{
				name: '',
				type: 'address',
				internalType: 'address',
			},
		],
		outputs: [
			{
				name: '',
				type: 'bool',
				internalType: 'bool',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'merkleRoot',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'bytes32',
				internalType: 'bytes32',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'multisig',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'address',
				internalType: 'address',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'owner',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'address',
				internalType: 'address',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'renounceOwnership',
		inputs: [],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'setDates',
		inputs: [
			{
				name: '_startDate',
				type: 'uint256',
				internalType: 'uint256',
			},
			{
				name: '_endDate',
				type: 'uint256',
				internalType: 'uint256',
			},
		],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'setMerkleRoot',
		inputs: [
			{
				name: '_newRoot',
				type: 'bytes32',
				internalType: 'bytes32',
			},
		],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'setMultisig',
		inputs: [
			{
				name: '_multisig',
				type: 'address',
				internalType: 'address',
			},
		],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'startDate',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'uint256',
				internalType: 'uint256',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'sweep',
		inputs: [],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'function',
		name: 'token',
		inputs: [],
		outputs: [
			{
				name: '',
				type: 'address',
				internalType: 'contract IERC20',
			},
		],
		stateMutability: 'view',
	},
	{
		type: 'function',
		name: 'transferOwnership',
		inputs: [
			{
				name: 'newOwner',
				type: 'address',
				internalType: 'address',
			},
		],
		outputs: [],
		stateMutability: 'nonpayable',
	},
	{
		type: 'event',
		name: 'Claimed',
		inputs: [
			{
				name: 'claimer',
				type: 'address',
				indexed: true,
				internalType: 'address',
			},
		],
		anonymous: false,
	},
	{
		type: 'event',
		name: 'OwnershipTransferred',
		inputs: [
			{
				name: 'previousOwner',
				type: 'address',
				indexed: true,
				internalType: 'address',
			},
			{
				name: 'newOwner',
				type: 'address',
				indexed: true,
				internalType: 'address',
			},
		],
		anonymous: false,
	},
	{
		type: 'event',
		name: 'Sweep',
		inputs: [
			{
				name: 'to',
				type: 'address',
				indexed: true,
				internalType: 'address',
			},
			{
				name: 'amount',
				type: 'uint256',
				indexed: false,
				internalType: 'uint256',
			},
		],
		anonymous: false,
	},
	{
		type: 'error',
		name: 'AlreadyClaimed',
		inputs: [],
	},
	{
		type: 'error',
		name: 'ClaimEnded',
		inputs: [],
	},
	{
		type: 'error',
		name: 'ClaimNotOver',
		inputs: [],
	},
	{
		type: 'error',
		name: 'ClaimNotStarted',
		inputs: [],
	},
	{
		type: 'error',
		name: 'ClaimWindowActive',
		inputs: [],
	},
	{
		type: 'error',
		name: 'InsufficientBalance',
		inputs: [],
	},
	{
		type: 'error',
		name: 'InvalidDates',
		inputs: [],
	},
	{
		type: 'error',
		name: 'InvalidProof',
		inputs: [],
	},
	{
		type: 'error',
		name: 'NothingToSweep',
		inputs: [],
	},
	{
		type: 'error',
		name: 'OwnableInvalidOwner',
		inputs: [
			{
				name: 'owner',
				type: 'address',
				internalType: 'address',
			},
		],
	},
	{
		type: 'error',
		name: 'OwnableUnauthorizedAccount',
		inputs: [
			{
				name: 'account',
				type: 'address',
				internalType: 'address',
			},
		],
	},
	{
		type: 'error',
		name: 'ReentrancyGuardReentrantCall',
		inputs: [],
	},
	{
		type: 'error',
		name: 'SafeERC20FailedOperation',
		inputs: [
			{
				name: 'token',
				type: 'address',
				internalType: 'address',
			},
		],
	},
]

const _bytecode =
	'0x608060405234801561000f575f5ffd5b5060405161162338038061162383398181016040528101906100319190610316565b815f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a2575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610099919061039c565b60405180910390fd5b6100b18161019160201b60201c565b50600180819055508284106100f2576040517fd937486c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b846002819055508060035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600481905550826005819055508160065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506103b5565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f5ffd5b5f819050919050565b61026881610256565b8114610272575f5ffd5b50565b5f815190506102838161025f565b92915050565b5f819050919050565b61029b81610289565b81146102a5575f5ffd5b50565b5f815190506102b681610292565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6102e5826102bc565b9050919050565b6102f5816102db565b81146102ff575f5ffd5b50565b5f81519050610310816102ec565b92915050565b5f5f5f5f5f60a0868803121561032f5761032e610252565b5b5f61033c88828901610275565b955050602061034d888289016102a8565b945050604061035e888289016102a8565b935050606061036f88828901610302565b925050608061038088828901610302565b9150509295509295909350565b610396816102db565b82525050565b5f6020820190506103af5f83018461038d565b92915050565b611261806103c25f395ff3fe608060405234801561000f575f5ffd5b50600436106100f3575f3560e01c80637cb6475911610095578063dedf141e11610064578063dedf141e14610227578063f2fde38b14610243578063f3283fba1461025f578063fc0c546a1461027b576100f3565b80637cb64759146101b35780638da5cb5b146101cf578063b391c508146101ed578063c24a0f8b14610209576100f3565b806335faa416116100d157806335faa416146101515780634783c35b1461015b578063715018a61461017957806373b2e80e14610183576100f3565b80630b97bc86146100f7578063270ef385146101155780632eb4a7ab14610133575b5f5ffd5b6100ff610299565b60405161010c9190610e2a565b60405180910390f35b61011d61029f565b60405161012a9190610e2a565b60405180910390f35b61013b6102ad565b6040516101489190610e5b565b60405180910390f35b6101596102b3565b005b6101636104ba565b6040516101709190610eb3565b60405180910390f35b6101816104df565b005b61019d60048036038101906101989190610efe565b6104f2565b6040516101aa9190610f43565b60405180910390f35b6101cd60048036038101906101c89190610f86565b61050f565b005b6101d761056c565b6040516101e49190610eb3565b60405180910390f35b61020760048036038101906102029190611012565b610593565b005b61021161091d565b60405161021e9190610e2a565b60405180910390f35b610241600480360381019061023c9190611087565b610923565b005b61025d60048036038101906102589190610efe565b6109c1565b005b61027960048036038101906102749190610efe565b610a45565b005b610283610a90565b6040516102909190611120565b60405180910390f35b60045481565b69023d98df6f759834000081565b60025481565b6102bb610ab5565b6102c3610b3c565b60055442116102fe576040517f76b6125a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103599190610eb3565b602060405180830381865afa158015610374573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610398919061114d565b90505f81036103d3576040517f351261fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61044060065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b829092919063ffffffff16565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fab2246061d7b0dd3631d037e3f6da75782ae489eeb9f6af878a4b25df9b07c77826040516104a79190610e2a565b60405180910390a2506104b8610c01565b565b60065f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104e7610ab5565b6104f05f610c0a565b565b6007602052805f5260405f205f915054906101000a900460ff1681565b610517610ab5565b600454421015801561052b57506005544211155b15610562576040517f9938be4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060028190555050565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61059b610b3c565b6004544210156105d7576040517fb0e9ce1e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554421115610613576040517f4f184b7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610694576040517f646cf55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f336040516020016106a691906111bd565b6040516020818303038152906040528051906020012090505f61070c8484808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f8201169050808301925050505050505060025484610ccb565b905080610745576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160075f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555069023d98df6f759834000060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107ff9190610eb3565b602060405180830381865afa15801561081a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083e919061114d565b1015610876576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108cc3369023d98df6f759834000060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610b829092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167fb449c24d261a59627b537c8c41c57ab559f4205c56bea745ff61c5521bece21460405160405180910390a25050610919610c01565b5050565b60055481565b61092b610ab5565b808210610964576040517fd937486c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454421015801561097857506005544211155b156109af576040517f9938be4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600481905550806005819055505050565b6109c9610ab5565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a39575f6040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610a309190610eb3565b60405180910390fd5b610a4281610c0a565b50565b610a4d610ab5565b8060065f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610abd610ce1565b73ffffffffffffffffffffffffffffffffffffffff16610adb61056c565b73ffffffffffffffffffffffffffffffffffffffff1614610b3a57610afe610ce1565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610b319190610eb3565b60405180910390fd5b565b600260015403610b78576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b610bfc838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401610bb59291906111d7565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ce8565b505050565b60018081905550565b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f82610cd78584610d83565b1490509392505050565b5f33905090565b5f5f60205f8451602086015f885af180610d07576040513d5f823e3d81fd5b3d92505f519150505f8214610d20576001811415610d3b565b5f8473ffffffffffffffffffffffffffffffffffffffff163b145b15610d7d57836040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401610d749190610eb3565b60405180910390fd5b50505050565b5f5f8290505f5f90505b8451811015610dc957610dba82868381518110610dad57610dac6111fe565b5b6020026020010151610dd4565b91508080600101915050610d8d565b508091505092915050565b5f818310610deb57610de68284610dfe565b610df6565b610df58383610dfe565b5b905092915050565b5f825f528160205260405f20905092915050565b5f819050919050565b610e2481610e12565b82525050565b5f602082019050610e3d5f830184610e1b565b92915050565b5f819050919050565b610e5581610e43565b82525050565b5f602082019050610e6e5f830184610e4c565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e9d82610e74565b9050919050565b610ead81610e93565b82525050565b5f602082019050610ec65f830184610ea4565b92915050565b5f5ffd5b5f5ffd5b610edd81610e93565b8114610ee7575f5ffd5b50565b5f81359050610ef881610ed4565b92915050565b5f60208284031215610f1357610f12610ecc565b5b5f610f2084828501610eea565b91505092915050565b5f8115159050919050565b610f3d81610f29565b82525050565b5f602082019050610f565f830184610f34565b92915050565b610f6581610e43565b8114610f6f575f5ffd5b50565b5f81359050610f8081610f5c565b92915050565b5f60208284031215610f9b57610f9a610ecc565b5b5f610fa884828501610f72565b91505092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f840112610fd257610fd1610fb1565b5b8235905067ffffffffffffffff811115610fef57610fee610fb5565b5b60208301915083602082028301111561100b5761100a610fb9565b5b9250929050565b5f5f6020838503121561102857611027610ecc565b5b5f83013567ffffffffffffffff81111561104557611044610ed0565b5b61105185828601610fbd565b92509250509250929050565b61106681610e12565b8114611070575f5ffd5b50565b5f813590506110818161105d565b92915050565b5f5f6040838503121561109d5761109c610ecc565b5b5f6110aa85828601611073565b92505060206110bb85828601611073565b9150509250929050565b5f819050919050565b5f6110e86110e36110de84610e74565b6110c5565b610e74565b9050919050565b5f6110f9826110ce565b9050919050565b5f61110a826110ef565b9050919050565b61111a81611100565b82525050565b5f6020820190506111335f830184611111565b92915050565b5f815190506111478161105d565b92915050565b5f6020828403121561116257611161610ecc565b5b5f61116f84828501611139565b91505092915050565b5f8160601b9050919050565b5f61118e82611178565b9050919050565b5f61119f82611184565b9050919050565b6111b76111b282610e93565b611195565b82525050565b5f6111c882846111a6565b60148201915081905092915050565b5f6040820190506111ea5f830185610ea4565b6111f76020830184610e1b565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea264697066735822122060fb757397448cbb2d47901e32f53d68fb2835c33f598f0ea7d2accbf094c82c64736f6c634300081c0033'

type BaoClaimConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: BaoClaimConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class BaoClaim__factory extends ContractFactory {
	constructor(...args: BaoClaimConstructorParams) {
		if (isSuperArgs(args)) {
			super(...args)
		} else {
			super(_abi, _bytecode, args[0])
		}
	}

	override deploy(
		_merkleRoot: PromiseOrValue<BytesLike>,
		_startDate: PromiseOrValue<BigNumberish>,
		_endDate: PromiseOrValue<BigNumberish>,
		_multisig: PromiseOrValue<string>,
		_token: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): Promise<BaoClaim> {
		return super.deploy(_merkleRoot, _startDate, _endDate, _multisig, _token, overrides || {}) as Promise<BaoClaim>
	}
	override getDeployTransaction(
		_merkleRoot: PromiseOrValue<BytesLike>,
		_startDate: PromiseOrValue<BigNumberish>,
		_endDate: PromiseOrValue<BigNumberish>,
		_multisig: PromiseOrValue<string>,
		_token: PromiseOrValue<string>,
		overrides?: Overrides & { from?: PromiseOrValue<string> },
	): TransactionRequest {
		return super.getDeployTransaction(_merkleRoot, _startDate, _endDate, _multisig, _token, overrides || {})
	}
	override attach(address: string): BaoClaim {
		return super.attach(address) as BaoClaim
	}
	override connect(signer: Signer): BaoClaim__factory {
		return super.connect(signer) as BaoClaim__factory
	}

	static readonly bytecode = _bytecode
	static readonly abi = _abi
	static createInterface(): BaoClaimInterface {
		return new utils.Interface(_abi) as BaoClaimInterface
	}
	static connect(address: string, signerOrProvider: Signer | Provider): BaoClaim {
		return new Contract(address, _abi, signerOrProvider) as BaoClaim
	}
}
